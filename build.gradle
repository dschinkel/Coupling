buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "net.rdrei.android.buildtimetracker:gradle-plugin:0.9.+"
    }
}

apply plugin: "build-time-tracker"

buildtimetracker {
    reporters {
        csv {
            output "build/times.csv"
            append true
            header false
        }

        summary {
            ordered false
            threshold 50
            barstyle "unicode"
        }

        csvSummary {
            csv "build/times.csv"
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

task clean {
    doLast {
        delete file('build')
        delete file('public/app/build')
        delete file('test-output')
    }
}

task installNodeModules(type: Exec) {
    inputs.file file('package.json')
    outputs.dir file('node_modules')
    commandLine "yarn", "install"
}

task clientVendorCompile(type: Exec) {
    dependsOn installNodeModules
    mustRunAfter clean
    inputs.file fileTree('node_modules')
    inputs.file file('package.json')
    inputs.file file('client/vendor.webpack.config.js')
    outputs.dir 'public/app/build/vendor'
    environment 'NODE_ENV': 'production'
    commandLine "node_modules/.bin/webpack", '--config', 'client/vendor.webpack.config.js'
}

task clientCompile(type: Exec) {
    dependsOn installNodeModules, clientVendorCompile
    mustRunAfter clean
    inputs.file fileTree('node_modules')
    inputs.file file('package.json')
    inputs.file file('tsconfig.json')
    inputs.file file('client/webpack.config.js')
    inputs.file fileTree('typings')
    inputs.file fileTree('common')
    inputs.file fileTree('client')
    outputs.dir 'public/app/build'
    environment 'NODE_ENV': 'production'
    commandLine "node_modules/.bin/webpack", '--config', 'client/webpack.config.js'
}

task serverCompile(type: Exec) {
    dependsOn installNodeModules
    mustRunAfter clean
    inputs.file file('node_modules')
    inputs.file file('package.json')
    inputs.file file('tsconfig.json')
    inputs.file file('server/webpack.config.js')
    inputs.file fileTree('typings')
    inputs.file fileTree('server')
    inputs.file fileTree('common')
    outputs.dir file('build')
    environment 'NODE_ENV': 'production'
    commandLine "node_modules/.bin/webpack", '--config', 'server/webpack.config.js'
}

task compile {
    dependsOn serverCompile, clientCompile
}

task clientTest(type: Exec) {
    dependsOn installNodeModules, clientVendorCompile
    inputs.file file('package.json')
    inputs.file clientCompile.inputs.files
    inputs.file fileTree('test/unit/client')
    outputs.dir file('test-output/client')

    commandLine 'yarn', 'run', 'clientTest', '--silent'
}

task serverTest(type: Exec) {
    dependsOn installNodeModules
    inputs.file file('package.json')
    inputs.file serverCompile.inputs.files
    inputs.file fileTree('test/unit/server')
    outputs.file file('test-output/server.unit')

    commandLine 'yarn', 'run', 'serverTest', '--silent'
}

task endpointTest(type: Exec) {
    dependsOn installNodeModules, serverCompile
    mustRunAfter serverTest
    inputs.file serverTest.inputs.files
    inputs.file serverCompile.outputs.files
    inputs.file file('package.json')
    inputs.file file('test/endpoint')
    outputs.file file('test-output/endpoint')

    commandLine 'yarn', 'run', 'endpointTest', '--silent'
}

task updateWebdriver(type: Exec) {
    outputs.file 'node_modules/webdriver-manager/selenium/'
    commandLine 'yarn', 'run', 'update-webdriver', '--silent'
}

task endToEndTest(type: Exec) {
    dependsOn compile, updateWebdriver
    mustRunAfter serverTest, clientTest, endpointTest
    inputs.file clientTest.inputs.files
    inputs.file serverTest.inputs.files
    inputs.file clientCompile.outputs.files
    inputs.file serverCompile.outputs.files
    inputs.file file('package.json')
    inputs.file file('test/e2e')
    outputs.file file('test-output/e2e')

    commandLine 'yarn', 'run', 'protractor', '--silent', '--seleniumAddress', "$System.env.SELENIUM_ADDRESS"
}

task test {
    dependsOn serverTest, clientTest, endpointTest
}

task start(type: Exec) {
    dependsOn compile
    commandLine 'yarn', 'run', 'start-built-app'
}

task watch(type: Exec) {
    commandLine 'node', 'test/continuous-run.js'
}

task build {
    dependsOn test, endToEndTest, clientCompile
}
