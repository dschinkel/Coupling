import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

plugins {
    id("com.moowork.node") version "1.2.0"
    id 'com.bmuschko.docker-remote-api' version '4.2.0'
}

node {
    version = "11.6.0"
    npmVersion = "6.5.0"
    yarnVersion = "1.10.1"
    download = true
}

task clean {
    doLast {
        delete file('build')
        delete file('public/app/build')
        delete file('test-output')
    }
}

yarn {
    inputs.file file('package.json')
    outputs.dir file('node_modules')
}

task clientVendorCompile(type: YarnTask) {
    dependsOn yarn
    mustRunAfter clean
    inputs.file fileTree('node_modules')
    inputs.file file('package.json')
    inputs.file file('client/vendor.webpack.config.js')
    outputs.dir 'public/app/build/vendor'
    environment 'NODE_ENV': 'production'
    args = ["webpack", '--config', 'client/vendor.webpack.config.js']
}

task clientCompile(type: YarnTask) {
    dependsOn yarn, clientVendorCompile
    mustRunAfter clean
    inputs.file fileTree('node_modules')
    inputs.file file('package.json')
    inputs.file file('tsconfig.json')
    inputs.file file('client/webpack.config.js')
    inputs.file fileTree('typings')
    inputs.file fileTree('common')
    inputs.file fileTree('client')
    outputs.dir 'public/app/build'
    environment 'NODE_ENV': 'production'
    args = ["webpack", '--config', 'client/webpack.config.js']
}

task clientStats(type: Exec) {
    environment 'NODE_ENV': 'production'
    commandLine "node_modules/.bin/webpack", '--json', '--config', 'client/webpack.config.js'

    doFirst {
        standardOutput new FileOutputStream("clientStats.json")
    }
}

task serverCompile(type: YarnTask) {
    dependsOn yarn
    mustRunAfter clean
    inputs.file file('node_modules')
    inputs.file file('package.json')
    inputs.file file('tsconfig.json')
    inputs.file file('server/webpack.config.js')
    inputs.file fileTree('typings')
    inputs.file fileTree('server')
    inputs.file fileTree('common')
    outputs.dir file('build')
    environment 'NODE_ENV': 'production'
    args = ["webpack", '--config', 'server/webpack.config.js']
}

task compile {
    dependsOn serverCompile, clientCompile
}

task clientTest(type: YarnTask) {
    dependsOn yarn, clientVendorCompile
    inputs.file file('package.json')
    inputs.file clientCompile.inputs.files
    inputs.file fileTree('test/unit/client')
    outputs.dir file('test-output/client')

    args = ['run', 'clientTest', '--silent']
}

task serverTest(type: YarnTask) {
    dependsOn yarn
    inputs.file file('package.json')
    inputs.file serverCompile.inputs.files
    inputs.file fileTree('test/unit/server')
    outputs.file file('test-output/server.unit')

    args = ['run', 'serverTest', '--silent']
}

task endpointTest(type: YarnTask) {
    dependsOn yarn, serverCompile
    mustRunAfter serverTest
    inputs.file serverTest.inputs.files
    inputs.file serverCompile.outputs.files
    inputs.file file('package.json')
    inputs.file file('test/endpoint')
    outputs.file file('test-output/endpoint')

    args = ['run', 'endpointTest', '--silent']
}

task updateWebdriver(type: YarnTask) {
    outputs.file 'node_modules/webdriver-manager/selenium/'
    args = ['run', 'update-webdriver', '--silent']
}

task endToEndTest(type: YarnTask) {
    dependsOn compile, updateWebdriver
    mustRunAfter serverTest, clientTest, endpointTest
    inputs.file clientTest.inputs.files
    inputs.file serverTest.inputs.files
    inputs.file clientCompile.outputs.files
    inputs.file serverCompile.outputs.files
    inputs.file file('package.json')
    inputs.file file('test/e2e')
    outputs.file file('test-output/e2e')

    args = ['run', 'protractor', '--silent', '--seleniumAddress', "$System.env.SELENIUM_ADDRESS"]
}

task test {
    dependsOn serverTest, clientTest, endpointTest
}

task start(type: YarnTask) {
    dependsOn compile
    args = ['run', 'start-built-app']
}

task watch(type: NodeTask) {
    args = ['test/continuous-run.js']
}

task build {
    dependsOn test, endToEndTest, clientCompile
}

task pullProductionImage(type: DockerPullImage) {
    repository = 'zegreatrob/coupling'
    tag = "latest"
}

task buildProductionImage(type: DockerBuildImage) {
    mustRunAfter "pullProductionImage"
    inputDir = file("./")
    dockerFile = file("Dockerfile.prod")
    remove = false
    tags.add('zegreatrob/coupling')
}

task pushProductionImage(type: DockerPushImage) {
    mustRunAfter "buildProductionImage"
    imageName = 'zegreatrob/coupling'
    tag = "latest"
}

docker {
    registryCredentials {
        username = System.getenv("DOCKER_USER")
        password = System.getenv("DOCKER_PASS")
        email = System.getenv("DOCKER_EMAIL")
    }
}